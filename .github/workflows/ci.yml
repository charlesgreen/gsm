name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.22, 1.23]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run tests
      run: go test -race -coverprofile=coverage.txt -covermode=atomic ./...
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.txt

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.23
    
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.23
    
    - name: Build binary
      run: go build -v ./cmd/server
    
    - name: Build Docker image
      run: docker build -t gsm-emulator:test .
    
    - name: Test Docker image
      run: |
        docker run -d --name gsm-test -p 8085:8085 gsm-emulator:test
        sleep 5
        curl -f http://localhost:8085/health || exit 1
        docker stop gsm-test
        docker rm gsm-test

  integration-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.23
    
    - name: Start emulator
      run: |
        go run cmd/server/main.go &
        echo "Waiting for server to start..."
        for i in {1..30}; do
          if curl -f http://localhost:8085/health 2>/dev/null; then
            echo "Server is ready"
            break
          fi
          echo "Waiting for server... ($i/30)"
          sleep 1
        done
    
    - name: Run integration tests
      run: go test -v ./tests/integration/...
    
    - name: Test with Google Cloud client
      run: |
        export SECRET_MANAGER_EMULATOR_HOST=localhost:8085
        go run pkg/client/example.go || echo "Example completed"

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Gosec Security Scanner
      uses: securego/gosec@master
      with:
        args: '-no-fail -fmt sarif -out results.sarif ./...'
    
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: results.sarif
      continue-on-error: true

  release:
    if: github.ref == 'refs/heads/main'
    needs: [test, lint, build, integration-test]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.23
    
    - name: Build release binaries
      run: |
        GOOS=linux GOARCH=amd64 go build -o bin/gsm-server-linux-amd64 ./cmd/server
        GOOS=darwin GOARCH=amd64 go build -o bin/gsm-server-darwin-amd64 ./cmd/server
        GOOS=windows GOARCH=amd64 go build -o bin/gsm-server-windows-amd64.exe ./cmd/server
    
    - name: Log in to Docker Hub
      if: github.repository == 'charlesgreen/gsm'
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Docker image
      if: github.repository == 'charlesgreen/gsm'
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          charlesgreen/gsm:latest
          charlesgreen/gsm:${{ github.sha }}
    
    - name: Create release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release create v${{ github.run_number }} \
          --title "Release v${{ github.run_number }}" \
          --notes "Automated release for build #${{ github.run_number }}" \
          bin/gsm-server-*